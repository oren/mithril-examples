{"_id":"inline-source-map","_rev":"31-41c9fe781d3e49f5ac6e75e17c8d4cce","name":"inline-source-map","description":"Adds source mappings and base64 encodes them, so they can be inlined in your generated file.","dist-tags":{"latest":"0.3.0"},"versions":{"0.1.0":{"name":"inline-source-map","version":"0.1.0","description":"Add source mappings to it and convert them to base64 encoded source mappings that can be inlined into your generated file.","main":"inline-source-map.js","scripts":{"test":"node-trap test/*.js"},"repository":{"type":"git","url":"git://github.com/thlorenz/inline-source-map.git"},"homepage":"https://github.com/thlorenz/inline-source-map","dependencies":{"source-map":"~0.1.9"},"devDependencies":{"trap":"~0.4.2"},"keywords":["source","map","inline","base64","bundle","generate","transpile"],"author":{"name":"Thorsten Lorenz","email":"thlorenz@gmx.de","url":"http://thlorenz.com"},"license":"MIT","engine":{"node":">=0.6"},"readme":"# inline-source-map [![build status](https://secure.travis-ci.org/thlorenz/inline-source-map.png)](http://travis-ci.org/thlorenz/inline-source-map)\n\nAdd source mappings to it and convert them to base64 encoded source mappings that can be inlined into your generated file.\n\n```js\nvar generator = require('inline-source-map');\n\nvar gen = generator()\n  .addMappings('foo.js', [{ original: { line: 2, column: 3 } , generated: { line: 5, column: 10 } }], { line: 5 })\n  .addGeneratedMappings('bar.js', 'var a = 2;\\nconsole.log(a)', { line: 23, column: 22 });\n\nconsole.log('base64 mapping:', gen.base64Encode());\nconsole.log('inline mapping url:', gen.inlineMappingUrl());\n```\n\n```\nbase64 mapping: eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlcyI6WyJmb28uanMiLCJiYXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O1VBQ0c7Ozs7Ozs7Ozs7Ozs7O3NCQ0RIO3NCQUNBIn0=\ninline mapping url: //@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlcyI6WyJmb28uanMiLCJiYXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O1VBQ0c7Ozs7Ozs7Ozs7Ozs7O3NCQ0RIO3NCQUNBIn0=\n```\n\n## API\n\n### addMappings\n\n```\n/**\n * Adds the given mappings to the generator and offsets them if offset is given \n *\n * @name addMappings\n * @function\n * @param sourceFile {String} name of the source file\n * @param mappings {Array{{Object}} each object has the form { original: { line: _, column: _ }, generated: { line: _, column: _ } }\n * @param offset {Object} offset to apply to each mapping. Has the form { line: _, column: _ }\n * @return {Object} the generator to allow chaining\n */\n```\n\n### addGeneratedMappings\n\n```\n/**\n * Generates mappings for the given source and adds them, assuming that no translation from original to generated is necessary.\n *\n * @name addGeneratedMappings\n * @function\n * @param sourceFile {String} name of the source file\n * @param source {String} source of the file\n * @param offset {Object} offset to apply to each mapping. Has the form { line: _, column: _ }\n * @return {Object} the generator to allow chaining\n */\n```\n\n### base64Encode\n\n```\n/**\n * @name base64Encode\n * @function\n * @return {String} bas64 encoded representation of the added mappings\n */\n```\n\n### inlineMappingUrl\n\n```\n/**\n * @name inlineMappingUrl\n * @function\n * @return {String} comment with base64 encoded representation of the added mappings. Can be inlined at the end of the generated file. \n */\n```\n","readmeFilename":"README.md","_id":"inline-source-map@0.1.0","dist":{"shasum":"6382ef02e0a7695d6a53c9ead14eadacac9df46c","tarball":"http://registry.npmjs.org/inline-source-map/-/inline-source-map-0.1.0.tgz"},"_npmVersion":"1.1.69","_npmUser":{"name":"thlorenz","email":"thlorenz@gmx.de"},"maintainers":[{"name":"thlorenz","email":"thlorenz@gmx.de"}],"directories":{}},"0.1.1":{"name":"inline-source-map","version":"0.1.1","description":"Adds source mappings and base64 encodes them, so they can be inlined in your generated file.","main":"inline-source-map.js","scripts":{"test":"node-trap test/*.js"},"repository":{"type":"git","url":"git://github.com/thlorenz/inline-source-map.git"},"homepage":"https://github.com/thlorenz/inline-source-map","dependencies":{"source-map":"~0.1.9"},"devDependencies":{"trap":"~0.4.2"},"keywords":["source","map","inline","base64","bundle","generate","transpile"],"author":{"name":"Thorsten Lorenz","email":"thlorenz@gmx.de","url":"http://thlorenz.com"},"license":"MIT","engine":{"node":">=0.6"},"readme":"# inline-source-map [![build status](https://secure.travis-ci.org/thlorenz/inline-source-map.png)](http://travis-ci.org/thlorenz/inline-source-map)\n\nAdds source mappings and base64 encodes them, so they can be inlined in your generated file.\n\n```js\nvar generator = require('inline-source-map');\n\nvar gen = generator()\n  .addMappings('foo.js', [{ original: { line: 2, column: 3 } , generated: { line: 5, column: 10 } }], { line: 5 })\n  .addGeneratedMappings('bar.js', 'var a = 2;\\nconsole.log(a)', { line: 23, column: 22 });\n\nconsole.log('base64 mapping:', gen.base64Encode());\nconsole.log('inline mapping url:', gen.inlineMappingUrl());\n```\n\n```\nbase64 mapping: eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlcyI6WyJmb28uanMiLCJiYXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O1VBQ0c7Ozs7Ozs7Ozs7Ozs7O3NCQ0RIO3NCQUNBIn0=\ninline mapping url: //@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlcyI6WyJmb28uanMiLCJiYXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O1VBQ0c7Ozs7Ozs7Ozs7Ozs7O3NCQ0RIO3NCQUNBIn0=\n```\n\n## API\n\n### addMappings(sourceFile, mappings, offset)\n\n```\n/**\n * Adds the given mappings to the generator and offsets them if offset is given \n *\n * @name addMappings\n * @function\n * @param sourceFile {String} name of the source file\n * @param mappings {Array{{Object}} each object has the form { original: { line: _, column: _ }, generated: { line: _, column: _ } }\n * @param offset {Object} offset to apply to each mapping. Has the form { line: _, column: _ }\n * @return {Object} the generator to allow chaining\n */\n```\n\n### addGeneratedMappings(sourceFile, source, offset)\n\n```\n/**\n * Generates mappings for the given source and adds them, assuming that no translation from original to generated is necessary.\n *\n * @name addGeneratedMappings\n * @function\n * @param sourceFile {String} name of the source file\n * @param source {String} source of the file\n * @param offset {Object} offset to apply to each mapping. Has the form { line: _, column: _ }\n * @return {Object} the generator to allow chaining\n */\n```\n\n### base64Encode()\n\n```\n/**\n * @name base64Encode\n * @function\n * @return {String} bas64 encoded representation of the added mappings\n */\n```\n\n### inlineMappingUrl()\n\n```\n/**\n * @name inlineMappingUrl\n * @function\n * @return {String} comment with base64 encoded representation of the added mappings. Can be inlined at the end of the generated file. \n */\n```\n","readmeFilename":"README.md","_id":"inline-source-map@0.1.1","dist":{"shasum":"3930e74b6116a7b242d7b015fce41d14c0a039ac","tarball":"http://registry.npmjs.org/inline-source-map/-/inline-source-map-0.1.1.tgz"},"_npmVersion":"1.1.69","_npmUser":{"name":"thlorenz","email":"thlorenz@gmx.de"},"maintainers":[{"name":"thlorenz","email":"thlorenz@gmx.de"}],"directories":{}},"0.1.2":{"name":"inline-source-map","version":"0.1.2","description":"Adds source mappings and base64 encodes them, so they can be inlined in your generated file.","main":"inline-source-map.js","scripts":{"test":"node-trap test/*.js"},"repository":{"type":"git","url":"git://github.com/thlorenz/inline-source-map.git"},"homepage":"https://github.com/thlorenz/inline-source-map","dependencies":{"source-map":"~0.1.9"},"devDependencies":{"trap":"~0.4.2"},"keywords":["source","map","inline","base64","bundle","generate","transpile"],"author":{"name":"Thorsten Lorenz","email":"thlorenz@gmx.de","url":"http://thlorenz.com"},"license":"MIT","engine":{"node":">=0.6"},"readme":"# inline-source-map [![build status](https://secure.travis-ci.org/thlorenz/inline-source-map.png)](http://travis-ci.org/thlorenz/inline-source-map)\n\nAdds source mappings and base64 encodes them, so they can be inlined in your generated file.\n\n```js\nvar generator = require('inline-source-map');\n\nvar gen = generator()\n  .addMappings('foo.js', [{ original: { line: 2, column: 3 } , generated: { line: 5, column: 10 } }], { line: 5 })\n  .addGeneratedMappings('bar.js', 'var a = 2;\\nconsole.log(a)', { line: 23, column: 22 });\n\nconsole.log('base64 mapping:', gen.base64Encode());\nconsole.log('inline mapping url:', gen.inlineMappingUrl());\n```\n\n```\nbase64 mapping: eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlcyI6WyJmb28uanMiLCJiYXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O1VBQ0c7Ozs7Ozs7Ozs7Ozs7O3NCQ0RIO3NCQUNBIn0=\ninline mapping url: //@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlcyI6WyJmb28uanMiLCJiYXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O1VBQ0c7Ozs7Ozs7Ozs7Ozs7O3NCQ0RIO3NCQUNBIn0=\n```\n\n## API\n\n### addMappings(sourceFile, mappings, offset)\n\n```\n/**\n * Adds the given mappings to the generator and offsets them if offset is given \n *\n * @name addMappings\n * @function\n * @param sourceFile {String} name of the source file\n * @param mappings {Array{{Object}} each object has the form { original: { line: _, column: _ }, generated: { line: _, column: _ } }\n * @param offset {Object} offset to apply to each mapping. Has the form { line: _, column: _ }\n * @return {Object} the generator to allow chaining\n */\n```\n\n### addGeneratedMappings(sourceFile, source, offset)\n\n```\n/**\n * Generates mappings for the given source and adds them, assuming that no translation from original to generated is necessary.\n *\n * @name addGeneratedMappings\n * @function\n * @param sourceFile {String} name of the source file\n * @param source {String} source of the file\n * @param offset {Object} offset to apply to each mapping. Has the form { line: _, column: _ }\n * @return {Object} the generator to allow chaining\n */\n```\n\n### base64Encode()\n\n```\n/**\n * @name base64Encode\n * @function\n * @return {String} bas64 encoded representation of the added mappings\n */\n```\n\n### inlineMappingUrl()\n\n```\n/**\n * @name inlineMappingUrl\n * @function\n * @return {String} comment with base64 encoded representation of the added mappings. Can be inlined at the end of the generated file. \n */\n```\n","readmeFilename":"README.md","_id":"inline-source-map@0.1.2","dist":{"shasum":"edddc26417df6551ddd7f5478f80485f71e0bd20","tarball":"http://registry.npmjs.org/inline-source-map/-/inline-source-map-0.1.2.tgz"},"_npmVersion":"1.1.69","_npmUser":{"name":"thlorenz","email":"thlorenz@gmx.de"},"maintainers":[{"name":"thlorenz","email":"thlorenz@gmx.de"}],"directories":{}},"0.1.3":{"name":"inline-source-map","version":"0.1.3","description":"Adds source mappings and base64 encodes them, so they can be inlined in your generated file.","main":"inline-source-map.js","scripts":{"test":"node-trap test/*.js"},"repository":{"type":"git","url":"git://github.com/thlorenz/inline-source-map.git"},"homepage":"https://github.com/thlorenz/inline-source-map","dependencies":{"source-map":"~0.1.9"},"devDependencies":{"trap":"~0.4.2"},"keywords":["source","map","inline","base64","bundle","generate","transpile"],"author":{"name":"Thorsten Lorenz","email":"thlorenz@gmx.de","url":"http://thlorenz.com"},"license":"MIT","engine":{"node":">=0.6"},"readme":"# inline-source-map [![build status](https://secure.travis-ci.org/thlorenz/inline-source-map.png)](http://travis-ci.org/thlorenz/inline-source-map)\n\nAdds source mappings and base64 encodes them, so they can be inlined in your generated file.\n\n```js\nvar generator = require('inline-source-map');\n\nvar gen = generator()\n  .addMappings('foo.js', [{ original: { line: 2, column: 3 } , generated: { line: 5, column: 10 } }], { line: 5 })\n  .addGeneratedMappings('bar.js', 'var a = 2;\\nconsole.log(a)', { line: 23, column: 22 });\n\nconsole.log('base64 mapping:', gen.base64Encode());\nconsole.log('inline mapping url:', gen.inlineMappingUrl());\n```\n\n```\nbase64 mapping: eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlcyI6WyJmb28uanMiLCJiYXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O1VBQ0c7Ozs7Ozs7Ozs7Ozs7O3NCQ0RIO3NCQUNBIn0=\ninline mapping url: //@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlcyI6WyJmb28uanMiLCJiYXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O1VBQ0c7Ozs7Ozs7Ozs7Ozs7O3NCQ0RIO3NCQUNBIn0=\n```\n\n## API\n\n### addMappings(sourceFile, mappings, offset)\n\n```\n/**\n * Adds the given mappings to the generator and offsets them if offset is given \n *\n * @name addMappings\n * @function\n * @param sourceFile {String} name of the source file\n * @param mappings {Array{{Object}} each object has the form { original: { line: _, column: _ }, generated: { line: _, column: _ } }\n * @param offset {Object} offset to apply to each mapping. Has the form { line: _, column: _ }\n * @return {Object} the generator to allow chaining\n */\n```\n\n### addGeneratedMappings(sourceFile, source, offset)\n\n```\n/**\n * Generates mappings for the given source and adds them, assuming that no translation from original to generated is necessary.\n *\n * @name addGeneratedMappings\n * @function\n * @param sourceFile {String} name of the source file\n * @param source {String} source of the file\n * @param offset {Object} offset to apply to each mapping. Has the form { line: _, column: _ }\n * @return {Object} the generator to allow chaining\n */\n```\n\n### base64Encode()\n\n```\n/**\n * @name base64Encode\n * @function\n * @return {String} bas64 encoded representation of the added mappings\n */\n```\n\n### inlineMappingUrl()\n\n```\n/**\n * @name inlineMappingUrl\n * @function\n * @return {String} comment with base64 encoded representation of the added mappings. Can be inlined at the end of the generated file. \n */\n```\n","readmeFilename":"README.md","_id":"inline-source-map@0.1.3","dist":{"shasum":"21e1db45d92d937d2fd6cdebae78c1bca63f6635","tarball":"http://registry.npmjs.org/inline-source-map/-/inline-source-map-0.1.3.tgz"},"_npmVersion":"1.1.69","_npmUser":{"name":"thlorenz","email":"thlorenz@gmx.de"},"maintainers":[{"name":"thlorenz","email":"thlorenz@gmx.de"}],"directories":{}},"0.2.0":{"name":"inline-source-map","version":"0.2.0","description":"Adds source mappings and base64 encodes them, so they can be inlined in your generated file.","main":"inline-source-map.js","scripts":{"test":"node-trap ./test/*.js && node-trap test/source-content.js"},"repository":{"type":"git","url":"git://github.com/thlorenz/inline-source-map.git"},"homepage":"https://github.com/thlorenz/inline-source-map","dependencies":{"source-map":"~0.1.9"},"devDependencies":{"trap":"~0.4.2"},"keywords":["source","map","inline","base64","bundle","generate","transpile"],"author":{"name":"Thorsten Lorenz","email":"thlorenz@gmx.de","url":"http://thlorenz.com"},"license":"MIT","engine":{"node":">=0.6"},"readme":"# inline-source-map [![build status](https://secure.travis-ci.org/thlorenz/inline-source-map.png)](http://travis-ci.org/thlorenz/inline-source-map)\n\nAdds source mappings and base64 encodes them, so they can be inlined in your generated file.\n\n```js\nvar generator = require('inline-source-map');\n\nvar gen = generator()\n  .addMappings('foo.js', [{ original: { line: 2, column: 3 } , generated: { line: 5, column: 10 } }], { line: 5 })\n  .addGeneratedMappings('bar.js', 'var a = 2;\\nconsole.log(a)', { line: 23, column: 22 });\n\nconsole.log('base64 mapping:', gen.base64Encode());\nconsole.log('inline mapping url:', gen.inlineMappingUrl());\n```\n\n```\nbase64 mapping: eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlcyI6WyJmb28uanMiLCJiYXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O1VBQ0c7Ozs7Ozs7Ozs7Ozs7O3NCQ0RIO3NCQUNBIn0=\ninline mapping url: //@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlcyI6WyJmb28uanMiLCJiYXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O1VBQ0c7Ozs7Ozs7Ozs7Ozs7O3NCQ0RIO3NCQUNBIn0=\n```\n\n## API\n\n### addMappings(sourceFile, mappings, offset)\n\n```\n/**\n * Adds the given mappings to the generator and offsets them if offset is given \n *\n * @name addMappings\n * @function\n * @param sourceFile {String} name of the source file\n * @param mappings {Array{{Object}} each object has the form { original: { line: _, column: _ }, generated: { line: _, column: _ } }\n * @param offset {Object} offset to apply to each mapping. Has the form { line: _, column: _ }\n * @return {Object} the generator to allow chaining\n */\n```\n\n### addGeneratedMappings(sourceFile, source, offset)\n\n```\n/**\n * Generates mappings for the given source and adds them, assuming that no translation from original to generated is necessary.\n *\n * @name addGeneratedMappings\n * @function\n * @param sourceFile {String} name of the source file\n * @param source {String} source of the file\n * @param offset {Object} offset to apply to each mapping. Has the form { line: _, column: _ }\n * @return {Object} the generator to allow chaining\n */\n```\n\n### addSourceContent(sourceFile, sourceContent)\n\n```\n/**\n * Adds source content for the given source file.\n * \n * @name addSourceContent\n * @function\n * @param sourceFile {String} The source file for which a mapping is included\n * @param sourceContent {String} The content of the source file\n * @return {Object} The generator to allow chaining\n */\n```\n\n\n### base64Encode()\n\n```\n/**\n * @name base64Encode\n * @function\n * @return {String} bas64 encoded representation of the added mappings\n */\n```\n\nIf source contents were added, this will be included in the encoded mappings.\n\n### inlineMappingUrl()\n\n```\n/**\n * @name inlineMappingUrl\n * @function\n * @return {String} comment with base64 encoded representation of the added mappings. Can be inlined at the end of the generated file. \n */\n```\n","readmeFilename":"README.md","_id":"inline-source-map@0.2.0","dist":{"shasum":"416e2c19df9ef0a5bff71c215ab79946e0eecbcf","tarball":"http://registry.npmjs.org/inline-source-map/-/inline-source-map-0.2.0.tgz"},"_npmVersion":"1.1.69","_npmUser":{"name":"thlorenz","email":"thlorenz@gmx.de"},"maintainers":[{"name":"thlorenz","email":"thlorenz@gmx.de"}],"directories":{}},"0.2.1":{"name":"inline-source-map","version":"0.2.1","description":"Adds source mappings and base64 encodes them, so they can be inlined in your generated file.","main":"inline-source-map.js","scripts":{"test":"node-trap ./test/*.js && node-trap test/source-content.js"},"repository":{"type":"git","url":"git://github.com/thlorenz/inline-source-map.git"},"homepage":"https://github.com/thlorenz/inline-source-map","dependencies":{"source-map":"~0.1.9"},"devDependencies":{"trap":"~0.4.2"},"keywords":["source","map","inline","base64","bundle","generate","transpile"],"author":{"name":"Thorsten Lorenz","email":"thlorenz@gmx.de","url":"http://thlorenz.com"},"license":"MIT","engine":{"node":">=0.6"},"readme":"# inline-source-map [![build status](https://secure.travis-ci.org/thlorenz/inline-source-map.png)](http://travis-ci.org/thlorenz/inline-source-map)\n\nAdds source mappings and base64 encodes them, so they can be inlined in your generated file.\n\n```js\nvar generator = require('inline-source-map');\n\nvar gen = generator()\n  .addMappings('foo.js', [{ original: { line: 2, column: 3 } , generated: { line: 5, column: 10 } }], { line: 5 })\n  .addGeneratedMappings('bar.js', 'var a = 2;\\nconsole.log(a)', { line: 23, column: 22 });\n\nconsole.log('base64 mapping:', gen.base64Encode());\nconsole.log('inline mapping url:', gen.inlineMappingUrl());\n```\n\n```\nbase64 mapping: eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlcyI6WyJmb28uanMiLCJiYXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O1VBQ0c7Ozs7Ozs7Ozs7Ozs7O3NCQ0RIO3NCQUNBIn0=\ninline mapping url: //@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlcyI6WyJmb28uanMiLCJiYXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O1VBQ0c7Ozs7Ozs7Ozs7Ozs7O3NCQ0RIO3NCQUNBIn0=\n```\n\n## API\n\n### addMappings(sourceFile, mappings, offset)\n\n```\n/**\n * Adds the given mappings to the generator and offsets them if offset is given \n *\n * @name addMappings\n * @function\n * @param sourceFile {String} name of the source file\n * @param mappings {Array{{Object}} each object has the form { original: { line: _, column: _ }, generated: { line: _, column: _ } }\n * @param offset {Object} offset to apply to each mapping. Has the form { line: _, column: _ }\n * @return {Object} the generator to allow chaining\n */\n```\n\n### addGeneratedMappings(sourceFile, source, offset)\n\n```\n/**\n * Generates mappings for the given source and adds them, assuming that no translation from original to generated is necessary.\n *\n * @name addGeneratedMappings\n * @function\n * @param sourceFile {String} name of the source file\n * @param source {String} source of the file\n * @param offset {Object} offset to apply to each mapping. Has the form { line: _, column: _ }\n * @return {Object} the generator to allow chaining\n */\n```\n\n### addSourceContent(sourceFile, sourceContent)\n\n```\n/**\n * Adds source content for the given source file.\n * \n * @name addSourceContent\n * @function\n * @param sourceFile {String} The source file for which a mapping is included\n * @param sourceContent {String} The content of the source file\n * @return {Object} The generator to allow chaining\n */\n```\n\n\n### base64Encode()\n\n```\n/**\n * @name base64Encode\n * @function\n * @return {String} bas64 encoded representation of the added mappings\n */\n```\n\nIf source contents were added, this will be included in the encoded mappings.\n\n### inlineMappingUrl()\n\n```\n/**\n * @name inlineMappingUrl\n * @function\n * @return {String} comment with base64 encoded representation of the added mappings. Can be inlined at the end of the generated file. \n */\n```\n","readmeFilename":"README.md","_id":"inline-source-map@0.2.1","dist":{"shasum":"8bab97dd420668288a7aa0c420efe21a8cd53aca","tarball":"http://registry.npmjs.org/inline-source-map/-/inline-source-map-0.2.1.tgz"},"_from":".","_npmVersion":"1.2.2","_npmUser":{"name":"thlorenz","email":"thlorenz@gmx.de"},"maintainers":[{"name":"thlorenz","email":"thlorenz@gmx.de"}],"directories":{}},"0.2.2":{"name":"inline-source-map","version":"0.2.2","description":"Adds source mappings and base64 encodes them, so they can be inlined in your generated file.","main":"inline-source-map.js","scripts":{"test":"node-trap ./test/*.js && node-trap test/source-content.js"},"repository":{"type":"git","url":"git://github.com/thlorenz/inline-source-map.git"},"homepage":"https://github.com/thlorenz/inline-source-map","dependencies":{"source-map":"~0.1.9"},"devDependencies":{"trap":"~0.4.2"},"keywords":["source","map","inline","base64","bundle","generate","transpile"],"author":{"name":"Thorsten Lorenz","email":"thlorenz@gmx.de","url":"http://thlorenz.com"},"license":"MIT","engine":{"node":">=0.6"},"readme":"# inline-source-map [![build status](https://secure.travis-ci.org/thlorenz/inline-source-map.png)](http://travis-ci.org/thlorenz/inline-source-map)\n\nAdds source mappings and base64 encodes them, so they can be inlined in your generated file.\n\n```js\nvar generator = require('inline-source-map');\n\nvar gen = generator()\n  .addMappings('foo.js', [{ original: { line: 2, column: 3 } , generated: { line: 5, column: 10 } }], { line: 5 })\n  .addGeneratedMappings('bar.js', 'var a = 2;\\nconsole.log(a)', { line: 23, column: 22 });\n\nconsole.log('base64 mapping:', gen.base64Encode());\nconsole.log('inline mapping url:', gen.inlineMappingUrl());\n```\n\n```\nbase64 mapping: eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlcyI6WyJmb28uanMiLCJiYXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O1VBQ0c7Ozs7Ozs7Ozs7Ozs7O3NCQ0RIO3NCQUNBIn0=\ninline mapping url: //@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlcyI6WyJmb28uanMiLCJiYXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O1VBQ0c7Ozs7Ozs7Ozs7Ozs7O3NCQ0RIO3NCQUNBIn0=\n```\n\n## API\n\n### addMappings(sourceFile, mappings, offset)\n\n```\n/**\n * Adds the given mappings to the generator and offsets them if offset is given \n *\n * @name addMappings\n * @function\n * @param sourceFile {String} name of the source file\n * @param mappings {Array{{Object}} each object has the form { original: { line: _, column: _ }, generated: { line: _, column: _ } }\n * @param offset {Object} offset to apply to each mapping. Has the form { line: _, column: _ }\n * @return {Object} the generator to allow chaining\n */\n```\n\n### addGeneratedMappings(sourceFile, source, offset)\n\n```\n/**\n * Generates mappings for the given source and adds them, assuming that no translation from original to generated is necessary.\n *\n * @name addGeneratedMappings\n * @function\n * @param sourceFile {String} name of the source file\n * @param source {String} source of the file\n * @param offset {Object} offset to apply to each mapping. Has the form { line: _, column: _ }\n * @return {Object} the generator to allow chaining\n */\n```\n\n### addSourceContent(sourceFile, sourceContent)\n\n```\n/**\n * Adds source content for the given source file.\n * \n * @name addSourceContent\n * @function\n * @param sourceFile {String} The source file for which a mapping is included\n * @param sourceContent {String} The content of the source file\n * @return {Object} The generator to allow chaining\n */\n```\n\n\n### base64Encode()\n\n```\n/**\n * @name base64Encode\n * @function\n * @return {String} bas64 encoded representation of the added mappings\n */\n```\n\nIf source contents were added, this will be included in the encoded mappings.\n\n### inlineMappingUrl()\n\n```\n/**\n * @name inlineMappingUrl\n * @function\n * @return {String} comment with base64 encoded representation of the added mappings. Can be inlined at the end of the generated file. \n */\n```\n","readmeFilename":"README.md","_id":"inline-source-map@0.2.2","dist":{"shasum":"6b6aeb2dbae0df1633036aac1352133f518baa38","tarball":"http://registry.npmjs.org/inline-source-map/-/inline-source-map-0.2.2.tgz"},"_npmVersion":"1.1.69","_npmUser":{"name":"thlorenz","email":"thlorenz@gmx.de"},"maintainers":[{"name":"thlorenz","email":"thlorenz@gmx.de"}],"directories":{}},"0.2.3":{"name":"inline-source-map","version":"0.2.3","description":"Adds source mappings and base64 encodes them, so they can be inlined in your generated file.","main":"inline-source-map.js","scripts":{"test":"node-trap ./test/*.js && node-trap test/source-content.js"},"repository":{"type":"git","url":"git://github.com/thlorenz/inline-source-map.git"},"homepage":"https://github.com/thlorenz/inline-source-map","dependencies":{"source-map":"~0.1.9"},"devDependencies":{"trap":"~0.4.2"},"keywords":["source","map","inline","base64","bundle","generate","transpile"],"author":{"name":"Thorsten Lorenz","email":"thlorenz@gmx.de","url":"http://thlorenz.com"},"license":"MIT","engine":{"node":">=0.6"},"readme":"# inline-source-map [![build status](https://secure.travis-ci.org/thlorenz/inline-source-map.png)](http://travis-ci.org/thlorenz/inline-source-map)\n\nAdds source mappings and base64 encodes them, so they can be inlined in your generated file.\n\n```js\nvar generator = require('inline-source-map');\n\nvar gen = generator()\n  .addMappings('foo.js', [{ original: { line: 2, column: 3 } , generated: { line: 5, column: 10 } }], { line: 5 })\n  .addGeneratedMappings('bar.js', 'var a = 2;\\nconsole.log(a)', { line: 23, column: 22 });\n\nconsole.log('base64 mapping:', gen.base64Encode());\nconsole.log('inline mapping url:', gen.inlineMappingUrl());\n```\n\n```\nbase64 mapping: eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlcyI6WyJmb28uanMiLCJiYXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O1VBQ0c7Ozs7Ozs7Ozs7Ozs7O3NCQ0RIO3NCQUNBIn0=\ninline mapping url: //@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlcyI6WyJmb28uanMiLCJiYXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O1VBQ0c7Ozs7Ozs7Ozs7Ozs7O3NCQ0RIO3NCQUNBIn0=\n```\n\n## API\n\n### addMappings(sourceFile, mappings, offset)\n\n```\n/**\n * Adds the given mappings to the generator and offsets them if offset is given \n *\n * @name addMappings\n * @function\n * @param sourceFile {String} name of the source file\n * @param mappings {Array{{Object}} each object has the form { original: { line: _, column: _ }, generated: { line: _, column: _ } }\n * @param offset {Object} offset to apply to each mapping. Has the form { line: _, column: _ }\n * @return {Object} the generator to allow chaining\n */\n```\n\n### addGeneratedMappings(sourceFile, source, offset)\n\n```\n/**\n * Generates mappings for the given source and adds them, assuming that no translation from original to generated is necessary.\n *\n * @name addGeneratedMappings\n * @function\n * @param sourceFile {String} name of the source file\n * @param source {String} source of the file\n * @param offset {Object} offset to apply to each mapping. Has the form { line: _, column: _ }\n * @return {Object} the generator to allow chaining\n */\n```\n\n### addSourceContent(sourceFile, sourceContent)\n\n```\n/**\n * Adds source content for the given source file.\n * \n * @name addSourceContent\n * @function\n * @param sourceFile {String} The source file for which a mapping is included\n * @param sourceContent {String} The content of the source file\n * @return {Object} The generator to allow chaining\n */\n```\n\n\n### base64Encode()\n\n```\n/**\n * @name base64Encode\n * @function\n * @return {String} bas64 encoded representation of the added mappings\n */\n```\n\nIf source contents were added, this will be included in the encoded mappings.\n\n### inlineMappingUrl()\n\n```\n/**\n * @name inlineMappingUrl\n * @function\n * @return {String} comment with base64 encoded representation of the added mappings. Can be inlined at the end of the generated file. \n */\n```\n","readmeFilename":"README.md","_id":"inline-source-map@0.2.3","dist":{"shasum":"ba0c9189acc81a6233baacd50a637ff7e37b9aea","tarball":"http://registry.npmjs.org/inline-source-map/-/inline-source-map-0.2.3.tgz"},"_from":".","_npmVersion":"1.2.14","_npmUser":{"name":"thlorenz","email":"thlorenz@gmx.de"},"maintainers":[{"name":"thlorenz","email":"thlorenz@gmx.de"}],"directories":{}},"0.2.4":{"name":"inline-source-map","version":"0.2.4","description":"Adds source mappings and base64 encodes them, so they can be inlined in your generated file.","main":"index.js","scripts":{"test":"tap ./test/*.js"},"repository":{"type":"git","url":"git://github.com/thlorenz/inline-source-map.git"},"homepage":"https://github.com/thlorenz/inline-source-map","dependencies":{"source-map":"~0.1.9"},"devDependencies":{"tap":"~0.4.3"},"keywords":["source","map","inline","base64","bundle","generate","transpile"],"author":{"name":"Thorsten Lorenz","email":"thlorenz@gmx.de","url":"http://thlorenz.com"},"license":"MIT","engine":{"node":">=0.6"},"readme":"# inline-source-map [![build status](https://secure.travis-ci.org/thlorenz/inline-source-map.png)](http://travis-ci.org/thlorenz/inline-source-map)\n\nAdds source mappings and base64 encodes them, so they can be inlined in your generated file.\n\n```js\nvar generator = require('inline-source-map');\n\nvar gen = generator()\n  .addMappings('foo.js', [{ original: { line: 2, column: 3 } , generated: { line: 5, column: 10 } }], { line: 5 })\n  .addGeneratedMappings('bar.js', 'var a = 2;\\nconsole.log(a)', { line: 23, column: 22 });\n\nconsole.log('base64 mapping:', gen.base64Encode());\nconsole.log('inline mapping url:', gen.inlineMappingUrl());\n```\n\n```\nbase64 mapping: eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlcyI6WyJmb28uanMiLCJiYXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O1VBQ0c7Ozs7Ozs7Ozs7Ozs7O3NCQ0RIO3NCQUNBIn0=\ninline mapping url: //@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlcyI6WyJmb28uanMiLCJiYXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O1VBQ0c7Ozs7Ozs7Ozs7Ozs7O3NCQ0RIO3NCQUNBIn0=\n```\n\n## API\n\n### addMappings(sourceFile, mappings, offset)\n\n```\n/**\n * Adds the given mappings to the generator and offsets them if offset is given \n *\n * @name addMappings\n * @function\n * @param sourceFile {String} name of the source file\n * @param mappings {Array{{Object}} each object has the form { original: { line: _, column: _ }, generated: { line: _, column: _ } }\n * @param offset {Object} offset to apply to each mapping. Has the form { line: _, column: _ }\n * @return {Object} the generator to allow chaining\n */\n```\n\n### addGeneratedMappings(sourceFile, source, offset)\n\n```\n/**\n * Generates mappings for the given source and adds them, assuming that no translation from original to generated is necessary.\n *\n * @name addGeneratedMappings\n * @function\n * @param sourceFile {String} name of the source file\n * @param source {String} source of the file\n * @param offset {Object} offset to apply to each mapping. Has the form { line: _, column: _ }\n * @return {Object} the generator to allow chaining\n */\n```\n\n### addSourceContent(sourceFile, sourceContent)\n\n```\n/**\n * Adds source content for the given source file.\n * \n * @name addSourceContent\n * @function\n * @param sourceFile {String} The source file for which a mapping is included\n * @param sourceContent {String} The content of the source file\n * @return {Object} The generator to allow chaining\n */\n```\n\n\n### base64Encode()\n\n```\n/**\n * @name base64Encode\n * @function\n * @return {String} bas64 encoded representation of the added mappings\n */\n```\n\nIf source contents were added, this will be included in the encoded mappings.\n\n### inlineMappingUrl()\n\n```\n/**\n * @name inlineMappingUrl\n * @function\n * @return {String} comment with base64 encoded representation of the added mappings. Can be inlined at the end of the generated file. \n */\n```\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/thlorenz/inline-source-map/issues"},"_id":"inline-source-map@0.2.4","dist":{"shasum":"0b487caa64dcf25a3a8f55438d216b9d444eebde","tarball":"http://registry.npmjs.org/inline-source-map/-/inline-source-map-0.2.4.tgz"},"_from":".","_npmVersion":"1.2.32","_npmUser":{"name":"thlorenz","email":"thlorenz@gmx.de"},"maintainers":[{"name":"thlorenz","email":"thlorenz@gmx.de"}],"directories":{}},"0.2.5":{"name":"inline-source-map","version":"0.2.5","description":"Adds source mappings and base64 encodes them, so they can be inlined in your generated file.","main":"index.js","scripts":{"test-main":"tap test/*.js","test-0.8":"nave use 0.8 npm run test-main","test-0.10":"nave use 0.10 npm run test-main","test-all":"npm run test-main && npm run test-0.8 && npm run test-0.10","test":"if [ -e $TRAVIS ]; then npm run test-all; else npm run test-main; fi"},"repository":{"type":"git","url":"git://github.com/thlorenz/inline-source-map.git"},"homepage":"https://github.com/thlorenz/inline-source-map","dependencies":{"source-map":"~0.1.25"},"devDependencies":{"tap":"~0.4.3","nave":"~0.4.4"},"keywords":["source","map","inline","base64","bundle","generate","transpile"],"author":{"name":"Thorsten Lorenz","email":"thlorenz@gmx.de","url":"http://thlorenz.com"},"license":"MIT","engine":{"node":">=0.6"},"readme":"# inline-source-map [![build status](https://secure.travis-ci.org/thlorenz/inline-source-map.png)](http://travis-ci.org/thlorenz/inline-source-map)\n\nAdds source mappings and base64 encodes them, so they can be inlined in your generated file.\n\n```js\nvar generator = require('inline-source-map');\n\nvar gen = generator()\n  .addMappings('foo.js', [{ original: { line: 2, column: 3 } , generated: { line: 5, column: 10 } }], { line: 5 })\n  .addGeneratedMappings('bar.js', 'var a = 2;\\nconsole.log(a)', { line: 23, column: 22 });\n\nconsole.log('base64 mapping:', gen.base64Encode());\nconsole.log('inline mapping url:', gen.inlineMappingUrl());\n```\n\n```\nbase64 mapping: eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlcyI6WyJmb28uanMiLCJiYXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O1VBQ0c7Ozs7Ozs7Ozs7Ozs7O3NCQ0RIO3NCQUNBIn0=\ninline mapping url: //@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlcyI6WyJmb28uanMiLCJiYXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O1VBQ0c7Ozs7Ozs7Ozs7Ozs7O3NCQ0RIO3NCQUNBIn0=\n```\n\n## API\n\n### addMappings(sourceFile, mappings, offset)\n\n```\n/**\n * Adds the given mappings to the generator and offsets them if offset is given \n *\n * @name addMappings\n * @function\n * @param sourceFile {String} name of the source file\n * @param mappings {Array{{Object}} each object has the form { original: { line: _, column: _ }, generated: { line: _, column: _ } }\n * @param offset {Object} offset to apply to each mapping. Has the form { line: _, column: _ }\n * @return {Object} the generator to allow chaining\n */\n```\n\n### addGeneratedMappings(sourceFile, source, offset)\n\n```\n/**\n * Generates mappings for the given source and adds them, assuming that no translation from original to generated is necessary.\n *\n * @name addGeneratedMappings\n * @function\n * @param sourceFile {String} name of the source file\n * @param source {String} source of the file\n * @param offset {Object} offset to apply to each mapping. Has the form { line: _, column: _ }\n * @return {Object} the generator to allow chaining\n */\n```\n\n### addSourceContent(sourceFile, sourceContent)\n\n```\n/**\n * Adds source content for the given source file.\n * \n * @name addSourceContent\n * @function\n * @param sourceFile {String} The source file for which a mapping is included\n * @param sourceContent {String} The content of the source file\n * @return {Object} The generator to allow chaining\n */\n```\n\n\n### base64Encode()\n\n```\n/**\n * @name base64Encode\n * @function\n * @return {String} bas64 encoded representation of the added mappings\n */\n```\n\nIf source contents were added, this will be included in the encoded mappings.\n\n### inlineMappingUrl()\n\n```\n/**\n * @name inlineMappingUrl\n * @function\n * @return {String} comment with base64 encoded representation of the added mappings. Can be inlined at the end of the generated file. \n */\n```\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/thlorenz/inline-source-map/issues"},"_id":"inline-source-map@0.2.5","dist":{"shasum":"242ff6c18b9fb0934f7a9e83c14219c61c131670","tarball":"http://registry.npmjs.org/inline-source-map/-/inline-source-map-0.2.5.tgz"},"_from":".","_npmVersion":"1.2.32","_npmUser":{"name":"thlorenz","email":"thlorenz@gmx.de"},"maintainers":[{"name":"thlorenz","email":"thlorenz@gmx.de"}],"directories":{}},"0.3.0":{"name":"inline-source-map","version":"0.3.0","description":"Adds source mappings and base64 encodes them, so they can be inlined in your generated file.","main":"index.js","scripts":{"test-main":"tap test/*.js","test-0.8":"nave use 0.8 npm run test-main","test-0.10":"nave use 0.10 npm run test-main","test-all":"npm run test-main && npm run test-0.8 && npm run test-0.10","test":"if [ -e $TRAVIS ]; then npm run test-all; else npm run test-main; fi"},"repository":{"type":"git","url":"git://github.com/thlorenz/inline-source-map.git"},"homepage":"https://github.com/thlorenz/inline-source-map","dependencies":{"source-map":"~0.1.31"},"devDependencies":{"tap":"~0.4.3","nave":"~0.4.4"},"keywords":["source","map","inline","base64","bundle","generate","transpile"],"author":{"name":"Thorsten Lorenz","email":"thlorenz@gmx.de","url":"http://thlorenz.com"},"license":"MIT","engine":{"node":">=0.6"},"readme":"# inline-source-map [![build status](https://secure.travis-ci.org/thlorenz/inline-source-map.png)](http://travis-ci.org/thlorenz/inline-source-map)\n\nAdds source mappings and base64 encodes them, so they can be inlined in your generated file.\n\n```js\nvar generator = require('inline-source-map');\n\nvar gen = generator()\n  .addMappings('foo.js', [{ original: { line: 2, column: 3 } , generated: { line: 5, column: 10 } }], { line: 5 })\n  .addGeneratedMappings('bar.js', 'var a = 2;\\nconsole.log(a)', { line: 23, column: 22 });\n\nconsole.log('base64 mapping:', gen.base64Encode());\nconsole.log('inline mapping url:', gen.inlineMappingUrl());\n```\n\n```\nbase64 mapping: eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlcyI6WyJmb28uanMiLCJiYXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O1VBQ0c7Ozs7Ozs7Ozs7Ozs7O3NCQ0RIO3NCQUNBIn0=\ninline mapping url: //@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlcyI6WyJmb28uanMiLCJiYXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O1VBQ0c7Ozs7Ozs7Ozs7Ozs7O3NCQ0RIO3NCQUNBIn0=\n```\n\n## API\n\n### addMappings(sourceFile, mappings, offset)\n\n```\n/**\n * Adds the given mappings to the generator and offsets them if offset is given \n *\n * @name addMappings\n * @function\n * @param sourceFile {String} name of the source file\n * @param mappings {Array{{Object}} each object has the form { original: { line: _, column: _ }, generated: { line: _, column: _ } }\n * @param offset {Object} offset to apply to each mapping. Has the form { line: _, column: _ }\n * @return {Object} the generator to allow chaining\n */\n```\n\n### addGeneratedMappings(sourceFile, source, offset)\n\n```\n/**\n * Generates mappings for the given source and adds them, assuming that no translation from original to generated is necessary.\n *\n * @name addGeneratedMappings\n * @function\n * @param sourceFile {String} name of the source file\n * @param source {String} source of the file\n * @param offset {Object} offset to apply to each mapping. Has the form { line: _, column: _ }\n * @return {Object} the generator to allow chaining\n */\n```\n\n### addSourceContent(sourceFile, sourceContent)\n\n```\n/**\n * Adds source content for the given source file.\n * \n * @name addSourceContent\n * @function\n * @param sourceFile {String} The source file for which a mapping is included\n * @param sourceContent {String} The content of the source file\n * @return {Object} The generator to allow chaining\n */\n```\n\n\n### base64Encode()\n\n```\n/**\n * @name base64Encode\n * @function\n * @return {String} bas64 encoded representation of the added mappings\n */\n```\n\nIf source contents were added, this will be included in the encoded mappings.\n\n### inlineMappingUrl()\n\n```\n/**\n * @name inlineMappingUrl\n * @function\n * @return {String} comment with base64 encoded representation of the added mappings. Can be inlined at the end of the generated file. \n */\n```\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/thlorenz/inline-source-map/issues"},"_id":"inline-source-map@0.3.0","dist":{"shasum":"ad2acca97d82fcb9d0a56221ee72e8043116424a","tarball":"http://registry.npmjs.org/inline-source-map/-/inline-source-map-0.3.0.tgz"},"_from":".","_npmVersion":"1.3.11","_npmUser":{"name":"thlorenz","email":"thlorenz@gmx.de"},"maintainers":[{"name":"thlorenz","email":"thlorenz@gmx.de"}],"directories":{}}},"readme":"# inline-source-map [![build status](https://secure.travis-ci.org/thlorenz/inline-source-map.png)](http://travis-ci.org/thlorenz/inline-source-map)\n\nAdd source mappings to it and convert them to base64 encoded source mappings that can be inlined into your generated file.\n\n```js\nvar generator = require('inline-source-map');\n\nvar gen = generator()\n  .addMappings('foo.js', [{ original: { line: 2, column: 3 } , generated: { line: 5, column: 10 } }], { line: 5 })\n  .addGeneratedMappings('bar.js', 'var a = 2;\\nconsole.log(a)', { line: 23, column: 22 });\n\nconsole.log('base64 mapping:', gen.base64Encode());\nconsole.log('inline mapping url:', gen.inlineMappingUrl());\n```\n\n```\nbase64 mapping: eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlcyI6WyJmb28uanMiLCJiYXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O1VBQ0c7Ozs7Ozs7Ozs7Ozs7O3NCQ0RIO3NCQUNBIn0=\ninline mapping url: //@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlcyI6WyJmb28uanMiLCJiYXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O1VBQ0c7Ozs7Ozs7Ozs7Ozs7O3NCQ0RIO3NCQUNBIn0=\n```\n\n## API\n\n### addMappings(sourceFile, mappings, offset)\n\n```\n/**\n * Adds the given mappings to the generator and offsets them if offset is given \n *\n * @name addMappings\n * @function\n * @param sourceFile {String} name of the source file\n * @param mappings {Array{{Object}} each object has the form { original: { line: _, column: _ }, generated: { line: _, column: _ } }\n * @param offset {Object} offset to apply to each mapping. Has the form { line: _, column: _ }\n * @return {Object} the generator to allow chaining\n */\n```\n\n### addGeneratedMappings(sourceFile, source, offset)\n\n```\n/**\n * Generates mappings for the given source and adds them, assuming that no translation from original to generated is necessary.\n *\n * @name addGeneratedMappings\n * @function\n * @param sourceFile {String} name of the source file\n * @param source {String} source of the file\n * @param offset {Object} offset to apply to each mapping. Has the form { line: _, column: _ }\n * @return {Object} the generator to allow chaining\n */\n```\n\n### base64Encode()\n\n```\n/**\n * @name base64Encode\n * @function\n * @return {String} bas64 encoded representation of the added mappings\n */\n```\n\n### inlineMappingUrl()\n\n```\n/**\n * @name inlineMappingUrl\n * @function\n * @return {String} comment with base64 encoded representation of the added mappings. Can be inlined at the end of the generated file. \n */\n```\n","maintainers":[{"name":"thlorenz","email":"thlorenz@gmx.de"}],"time":{"modified":"2013-11-05T14:52:12.205Z","created":"2013-03-07T13:21:00.896Z","0.1.0":"2013-03-07T13:32:07.584Z","0.1.1":"2013-03-07T13:33:49.491Z","0.1.2":"2013-03-09T04:38:51.659Z","0.1.3":"2013-03-10T17:38:24.921Z","0.2.0":"2013-03-11T12:46:27.672Z","0.2.1":"2013-03-11T15:53:40.664Z","0.2.2":"2013-03-17T00:38:53.734Z","0.2.3":"2013-03-27T12:18:51.752Z","0.2.4":"2013-07-06T01:46:12.170Z","0.2.5":"2013-07-06T02:26:47.112Z","0.3.0":"2013-11-05T14:52:12.205Z"},"author":{"name":"Thorsten Lorenz","email":"thlorenz@gmx.de","url":"http://thlorenz.com"},"repository":{"type":"git","url":"git://github.com/thlorenz/inline-source-map.git"},"_attachments":{},"_etag":"\"E7Z2Q4SXNKX3FL5CED4BBU3C8\""}